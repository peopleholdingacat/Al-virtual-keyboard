# -*- coding: utf-8 -*-
#@auther peopleholdingcat
# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2
from cvzone.HandTrackingModule import HandDetector
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget,QMessageBox,QFileDialog,QFrame
from PyQt5.QtGui import QIcon
import sys,os
import time
line=""
class Button():
    def __init__(self, img):
        self.img = img

    def drawpic(self, pos, txt):
        cv2.rectangle(self.img, pos, (pos[0] + 100, pos[1] + 100), (255, 0, 255), cv2.FILLED)
        cv2.putText(self.img, txt, (pos[0] + 25, pos[1] + 73), cv2.FONT_HERSHEY_PLAIN, 5, (255, 255, 255), 5)
cap = cv2.VideoCapture(0)
cap.set(3, 1200)
cap.set(4, 720)
detector = HandDetector(detectionCon=0.8)
class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1600, 738)
        Form.setMinimumSize(QtCore.QSize(1600, 738))
        Form.setMaximumSize(QtCore.QSize(1600, 738))
        Form.setWindowTitle("AL虚拟键盘")
        Form.setWindowIcon(QIcon("5.png"))
        self.horizontalLayout = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setMinimumSize(QtCore.QSize(1200, 720))
        self.frame.setMaximumSize(QtCore.QSize(1200, 720))
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setObjectName("frame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label = QtWidgets.QLabel(self.frame)
        #self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setObjectName("label")
        self.horizontalLayout_4.addWidget(self.label)
        self.horizontalLayout.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(Form)
        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame1 = QtWidgets.QFrame(self.frame_2)
        self.frame1.setMinimumSize(QtCore.QSize(0, 60))
        self.frame1.setMaximumSize(QtCore.QSize(16777215, 60))
        self.frame1.setFrameShape(QtWidgets.QFrame.Box)
        self.frame1.setObjectName("frame1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.frame1)
        self.pushButton.setMinimumSize(QtCore.QSize(65, 0))
        self.pushButton.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame1)
        self.pushButton_3.setMinimumSize(QtCore.QSize(65, 0))
        self.pushButton_3.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame1)
        self.pushButton_2.setMinimumSize(QtCore.QSize(65, 0))
        self.pushButton_2.setMaximumSize(QtCore.QSize(64, 16777215))
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame1)
        self.pushButton_4.setMinimumSize(QtCore.QSize(65, 0))
        self.pushButton_4.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_2.addWidget(self.pushButton_4)
        self.verticalLayout.addWidget(self.frame1)
        self.frame_21 = QtWidgets.QFrame(self.frame_2)
        self.frame_21.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_21.setObjectName("frame_21")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_21)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.textEdit = QtWidgets.QTextEdit(self.frame_21)
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout_3.addWidget(self.textEdit)
        self.verticalLayout.addWidget(self.frame_21)
        self.horizontalLayout.addWidget(self.frame_2)
        self.pushButton.setIcon(QIcon("1.png"))
        self.pushButton_2.setIcon(QIcon("2.png"))
        self.pushButton_3.setIcon(QIcon("3.png"))
        self.pushButton_4.setIcon(QIcon("4.png"))
        # self.pushButton.setStyleSheet("QPushButton{border-image: url(1.png)}")
        # self.pushButton_2.setStyleSheet("QPushButton{border-image: url(2.png)}")
        # self.pushButton_3.setStyleSheet("QPushButton{border-image: url(3.png)}")
        # self.pushButton_4.setStyleSheet("QPushButton{border-image: url(4.png)}")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "TextLabel"))
        self.pushButton.setText(_translate("Form", ""))
        self.pushButton_3.setText(_translate("Form", ""))
        self.pushButton_2.setText(_translate("Form", ""))
        self.pushButton_4.setText(_translate("Form", ""))

class mywindow(QWidget, Ui_Form):  # 这个地方要注意Ui_MainWindow
    def __init__(self):
        super(mywindow, self).__init__()
        self.setupUi(self)
        self.timer_camera = QtCore.QTimer()
        self.timer_camera.start(30)
        self.slot_init()
        # self.widget.setStyleSheet("QWidget{border-image: url(pic/class2.png)}")

    def slot_init(self):
        self.timer_camera.timeout.connect(self.show_camera)
        self.pushButton.clicked.connect(self.copy)
        self.pushButton_2.clicked.connect(self.selectall)
        self.pushButton_3.clicked.connect(self.clear)
        self.pushButton_4.clicked.connect(self.save)
    def copy(self):
        self.textEdit.copy()
    def selectall(self):
        self.textEdit.selectAll()
    def clear(self):
        self.textEdit.clear()
        global line
        line=""
    def save(self):
        text=self.textEdit.toPlainText()
        fileName_choose, filetype = QFileDialog.getSaveFileName(self,
                                                                "文件保存",
                                                                os.getcwd(),  # 起始路径
                                                                "All Files (*);;Text Files (*.txt)")

        if fileName_choose == "":
            return

        with open(fileName_choose,"a") as fp:
            fp.write(text)

    def show_camera(self):
        global line

        pos = [
            (80, 100), (190, 100), (300, 100), (410, 100), (520, 100), (630, 100), (740, 100), (850, 100), (960, 100),
            (1070, 100), (115, 210), (225, 210), (335, 210), (445, 210),
            (555, 210), (665, 210), (775, 210), (885, 210), (995, 210), (140, 320), (250, 320), (360, 320), (470, 320),
            (580, 320), (690, 320), (800, 320)
        ]
        val = ["Q", "W", "E", "R", "T", "V", "U", "I", "O", "P", "A", "S", "D", "F", "G", "H", "J", "K", "L", "Z", "X",
               "C", "V", "B", "N", "M"]
        ret, frame = cap.read()
        frame = cv2.flip(frame, 1)
        if ret == True:
            pic = detector.findHands(frame)
            lmlist, bboxinfo = detector.findPosition(pic)

            mybutton = Button(pic)
            ###画出键盘#######
            al_list = ["Q", "W", "E", "R", "T", "V", "U", "I", "O", "P"]
            al_list2 = ["A", "S", "D", "F", "G", "H", "J", "K", "L"]
            cout1 = 0
            for i in al_list:
                cout1 += 1
                mybutton.drawpic((cout1 * 110 - 30, 100), i)
            cout2 = 0
            for i in al_list2:
                cout2 += 1
                mybutton.drawpic((cout2 * 110 + 5, 210), i)
            al_list3 = ["Z", "X", "C", "V", "B", "N", "M"]
            cout3 = 0
            for i in al_list3:
                cout3 += 1
                mybutton.drawpic((cout3 * 110 + 30, 320), i)
            ######################
            ####判断部分#####
            try:
                if lmlist:
                    for pos1 in pos:
                        x, y = pos1
                        if x < lmlist[8][0] < x + 100 and y < lmlist[8][1] < y + 100:
                            cv2.rectangle(pic, pos1, (pos1[0] + 100, pos1[1] + 100), (0, 255, 0), cv2.FILLED)
                            cv2.putText(pic, val[pos.index(pos1)], (pos1[0] + 25, pos1[1] + 73),
                                        cv2.FONT_HERSHEY_PLAIN, 5,
                                        (255, 255, 255), 5)
                            l, _, _ = detector.findDistance(8, 12, pic, draw=False)
                            if l < 38:
                                cv2.rectangle(pic, pos1, (pos1[0] + 100, pos1[1] + 100), (0, 255, 0), cv2.FILLED)
                                cv2.putText(pic, val[pos.index(pos1)], (pos1[0] + 25, pos1[1] + 73),
                                            cv2.FONT_HERSHEY_PLAIN,
                                            5,
                                            (0, 0, 0), 5)
                                line+=val[pos.index(pos1)]
                                time.sleep(0.15)
            except Exception as e:
                with open("error.log","a") as fp:
                    fp.write(e)
            pic=cv2.cvtColor(pic, cv2.COLOR_BGR2RGB)
            showImage = QtGui.QImage(pic.data, pic.shape[1], pic.shape[0], QtGui.QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
            self.textEdit.setText(line)
if __name__ == '__main__':
    app = QApplication(sys.argv)
    w = mywindow()
    w.show()
    sys.exit(app.exec_())